#!/bin/bash

# Check if running as root. If root, script will exit
if [[ $EUID -eq 0 ]]; then
	echo "Don't run this as root. It will break."
	exit 1
fi

# Set some colors for output messages
OK="$(tput setaf 2)[OK]$(tput sgr0)"
ERROR="$(tput setaf 1)[ERROR]$(tput sgr0)"
NOTE="$(tput setaf 3)[NOTE]$(tput sgr0)"
WARN="$(tput setaf 166)[WARN]$(tput sgr0)"
CAT="$(tput setaf 6)[ACTION]$(tput sgr0)"
ORANGE=$(tput setaf 166)
YELLOW=$(tput setaf 3)
RESET=$(tput sgr0)

# Set the name of the log file to include the current date and time
LOG="install-$(date +%d-%H%M%S).log"

#clear screen
clear

# Get the width of the terminal
TERM_WIDTH=$(tput cols)

# Calculate the padding for the message
MESSAGE="Time to deploy some garbage configs!"
PAD_LENGTH=$(( ($TERM_WIDTH - ${#MESSAGE}) / 2 ))

# Set the color to purple
GREN='\033[0;32m'
PURPL='\033[0;35m'
NC='\033[0m' # No Color

# Display the message with thicker width and green color
printf "${PURPL}+$(printf '%*s' "$((TERM_WIDTH-1))" '' | tr ' ' -)+${NC}\n"
printf "${PURPL}|%*s${MESSAGE}%*s|${NC}\n" $PAD_LENGTH "" $PAD_LENGTH ""
printf "${PURPL}+$(printf '%*s' "$((TERM_WIDTH-1))" '' | tr ' ' -)+${NC}\n"

sleep 2

# Print backup warning message
printf "${ORANGE}$(tput smso)If you are for some reason running this on an already configured system, back up your files.$(tput rmso)\n"
printf "${YELLOW} I can try to back up your files, but better yet if you aren't me, press ctrl+c and exit this.!\n"
printf "\n"
printf "\n"
sleep 2

# Print password warning message
printf "\n${YELLOW} Some commands require you to enter your password.\n"
printf "If you are worried about this, you shouldn't be because you wrote this script. If you aren't me, stop using it for your own sake.${RESET}\n"
sleep 2
printf "\n"
printf "\n"

# Print system-update warning message
printf "\n${NOTE} Theoretically, the system should be up to date, but make sure it is.\n"
printf "${WARN} If there is a kernel update, reboot first your system and re-run script. Script may fail if not updated. .${RESET}\n"
sleep 2
printf "\n"
printf "\n"

# proceed
read -n1 -rep "${CAT} Start the installer? (y/n) " PROCEED
    echo
if [[ $PROCEED =~ ^[Yy]$ ]]; then
    printf "\n%s  Starting up the pain.\n" "${OK}"
else
    printf "\n%s  Good choice.\n" "${NOTE}"
    exit
fi

#clear screen
clear

# Check for AUR helper and install if not found
ISAUR=$(command -v yay || command -v paru)

if [ -n "$ISAUR" ]; then
    printf "\n%s - AUR helper was located, moving on.\n" "${OK}"
else 
    printf "\n%s - AUR helper was NOT located\n" "$WARN"

    while true; do
      read -rp "${CAT} Which flavour of AUR helper for today? yay (y) or paru (p)?" choice 
        case "$choice" in
            y|Y)
                printf "\n%s - Installing yay from AUR\n" "${NOTE}"
                git clone https://aur.archlinux.org/yay-bin.git || { printf "%s - Failed to clone yay from AUR\n" "${ERROR}"; exit 1; }
                cd yay-bin || { printf "%s - Failed to enter yay-bin directory\n" "${ERROR}"; exit 1; }
                makepkg -si --noconfirm 2>&1 | tee -a "$LOG" || { printf "%s - Failed to install yay from AUR\n" "${ERROR}"; exit 1; }
                cd ..
                break
                ;;
            p|P)
                printf "\n%s - Installing paru from AUR\n" "${NOTE}"
                git clone https://aur.archlinux.org/paru-bin.git || { printf "%s - Failed to clone paru from AUR\n" "${ERROR}"; exit 1; }
                cd paru-bin || { printf "%s - Failed to enter paru-bin directory\n" "${ERROR}"; exit 1; }
                makepkg -si --noconfirm 2>&1 | tee -a "$LOG" || { printf "%s - Failed to install paru from AUR\n" "${ERROR}"; exit 1; }
                cd ..
                break
                ;;
            *)
                printf "%s - Invalid choice. Please enter 'y' or 'p'\n" "${ERROR}"
                continue
                ;;
        esac
    done
fi

#clear screen
clear

# Update system before proceeding
printf "\n%s - Updating system to be extra sure.\n" "${NOTE}"
ISAUR=$(command -v yay || command -v paru)

$ISAUR -Syu --noconfirm 2>&1 | tee -a "$LOG" || { printf "%s - Failed to update system\n" "${ERROR}"; exit 1; }

#clear screen
clear

# Set the script to exit on error
set -e

# Function for installing packages
install_package() {
    # checking if package is already installed
    if $ISAUR -Q "$1" &>> /dev/null ; then
        echo -e "${OK} $1 is already installed. skipping..."
    else
        # package not installed
        echo -e "${NOTE} installing $1 ..."
        $ISAUR -S --noconfirm "$1" 2>&1 | tee -a "$LOG"
        # making sure package installed
        if $ISAUR -Q "$1" &>> /dev/null ; then
            echo -e "\e[1A\e[K${OK} $1 was installed."
        else
            # something is missing, exitting to review log
            echo -e "\e[1A\e[K${ERROR} $1 failed to install check the install.log  :("
            exit 1
        fi
    fi
}

# Function to print error messages
print_error() {
    printf " %s%s\n" "${ERROR}" "$1" "$NC" 2>&1 | tee -a "$LOG"
}

# Function to print success messages
print_success() {
    printf "%s%s%s\n" "${OK}" "$1" "$NC" 2>&1 | tee -a "$LOG"
}

# Exit immediately if a command exits with a non-zero status.
set -e 

# Hyprland Main installation part including automatic detection of Nvidia-GPU is present in your system
if ! lspci -k | grep -A 2 -E "(VGA|3D)" | grep -iq nvidia; then
    printf "${YELLOW} No NVIDIA GPU detected in your system. Thank god."
    sleep 1
    for HYP in hyprland; do
        install_package "$HYP" 2>&1 | tee -a $LOG
    done
else
	# Prompt user for Nvidia installation
	printf "${YELLOW} NVIDIA GPU Detected. Only god can help you now.\n"
	sleep 1
	printf "${YELLOW} Remember to enable NVIDIA settings in the config after install, or don't.\n"
	sleep 2
	read -n1 -rp "Would you like to install Nvidia Hyprland? (y/n) " NVIDIA
	echo

	if [[ $NVIDIA =~ ^[Yy]$ ]]; then
    	# Install Nvidia Hyprland
    	printf "\n"
    	printf "${YELLOW}Installing Nvidia Hyprland...${RESET}\n"
    	if pacman -Qs hyprland > /dev/null; then
        	read -n1 -rp "Hyprland detected. Would you like to remove and install hyprland-nvidia instead? (y/n) " nvidia_hypr
        	echo
        	if [[ $nvidia_hypr =~ ^[Yy]$ ]]; then
            	sudo pacman -R --noconfirm hyprland 2>/dev/null | tee -a "$LOG" || true
        	fi
    		fi
    		for hyprnvi in hyprland hyprland-nvidia hyprland-nvidia-hidpi-git; do
        	sudo pacman -R --noconfirm "$hyprnvi" 2>/dev/null | tee -a $LOG || true
    		done
    	install_package "hyprland-nvidia-git" 2>&1 | tee -a $LOG
	else
    		printf "\n"
   	 	printf "${YELLOW} Installing non-Nvidia Hyprland...\n"
    		for hyprnvi in hyprland-nvidia-git hyprland-nvidia hyprland-nvidia-hidpi-git; do
        	sudo pacman -R --noconfirm "$hyprnvi" 2>/dev/null | tee -a $LOG || true
    		done
    		for HYP2 in hyprland; do
        install_package "$HYP2" 2>&1 | tee -a $LOG
    		done
	fi

    # Install additional nvidia packages
    printf "${YELLOW} Installing additional Nvidia packages...\n"
        for krnl in $(cat /usr/lib/modules/*/pkgbase); do
            for NVIDIA in "${krnl}-headers" nvidia-dkms nvidia-settings nvidia-utils libva libva-nvidia-driver-git; do
            install_package "$NVIDIA" 2>&1 | tee -a $LOG
            done
        done

    #check if the nvidia modules are already added in mkinitcpio.conf and add if not
    if grep -qE '^MODULES=.*nvidia. *nvidia_modeset.*nvidia_uvm.*nvidia_drm' /etc/mkinitcpio.conf; then
	    echo "Nvidia modules already included in /etc/mkinitcpio.conf" 2>&1 | tee -a $LOG
    else
	    sudo sed -Ei 's/^(MODULES=\([^\)]*)\)/\1 nvidia nvidia_modeset nvidia_uvm nvidia_drm)/' /etc/mkinitcpio.conf 2>&1 | tee -a $LOG
	    echo "Nvidia modules added in /etc/mkinitcpio.conf"
    fi
        sudo mkinitcpio -P 2>&1 | tee -a $LOG
    printf "\n"   
    printf "\n"
    printf "\n"

    # preparing exec.conf to enable env = WLR_NO_HARDWARE_CURSORS,1 so it will be ready once config files copied
    sed -i '44s/#//' config/hypr/configs/exec.conf
    
    # Additional Nvidia steps
    NVEA="/etc/modprobe.d/nvidia.conf"
    if [ -f "$NVEA" ]; then
            printf "${OK} Seems like nvidia-drm modeset=1 is already added in your system..moving on.\n"
            printf "\n"
        else
            printf "\n"
            printf "${YELLOW} Adding options to $NVEA..."
            sudo echo -e "options nvidia-drm modeset=1" | sudo tee -a /etc/modprobe.d/nvidia.conf 2>&1 | tee -a $LOG
            printf "\n"  
            fi
    
	# Blacklist nouveau
	read -n1 -rep "${CAT} Would you like to blacklist nouveau? (y/n)" response
	echo
	if [[ $response =~ ^[Yy]$ ]]; then
    	NOUVEAU="/etc/modprobe.d/nouveau.conf"
    	if [ -f "$NOUVEAU" ]; then
        	printf "${OK} Seems like nouveau is already blacklisted..moving on.\n"
    	else
        	printf "\n"
        	echo "blacklist nouveau" | sudo tee -a "$NOUVEAU" 2>&1 | tee -a $LOG 
        	printf "${NOTE} has been added to $NOUVEAU.\n"
        	printf "\n"          

        	# to completely blacklist nouveau (See wiki.archlinux.org/title/Kernel_module#Blacklisting 6.1)
        	if [ -f "/etc/modprobe.d/blacklist.conf" ]; then
            	echo "install nouveau /bin/true" | sudo tee -a "/etc/modprobe.d/blacklist.conf" 2>&1 | tee -a $LOG 
        	else
            	echo "install nouveau /bin/true" | sudo tee "/etc/modprobe.d/blacklist.conf" 2>&1 | tee -a $LOG 
        	fi
    	fi
	else
    	printf "${NOTE} Skipping nouveau blacklisting.\n"
	fi

fi

#clear screen
clear 

# installation of other components needed
printf "\n%s - Installing other necessary packages.... \n" "${NOTE}"

for PKG1 in foot swaybg swaylock-effects wofi wlogout mako grim slurp wl-clipboard polkit-kde-agent nwg-look-bin swww neovim pipewire pipewire-pulse pipewire-jack pipewire-alsa pavucontrol ncmpcpp mpd mpc; do
    install_package "$PKG1" 2>&1 | tee -a "$LOG"
    if [ $? -ne 0 ]; then
        echo -e "\e[1A\e[K${ERROR} - $PKG1 install had failed, please check the install.log"
        exit 1
    fi
done

for PKG2 in rofi-lbonn-wayland librewolf-bin zsh zsh-you-should-use zsh-autosuggestions starship exa tere bat qt5ct btop jq gvfs gvfs-mtp ffmpegthumbs mpv python-requests pamixer brightnessctl xdg-user-dirs viewnior mpv network-manager-applet cava wireplumber; do
    install_package  "$PKG2" 2>&1 | tee -a "$LOG"
    if [ $? -ne 0 ]; then
        echo -e "\e[1A\e[K${ERROR} - $PKG2 install had failed, please check the install.log"
        exit 1
    fi
done

for FONT in otf-font-awesome ttf-jetbrains-mono-nerd ttf-jetbrains-mono otf-font-awesome-4 ttf-droid ttf-fantasque-sans-mono adobe-source-code-pro-fonts; do
    install_package  "$FONT" 2>&1 | tee -a "$LOG"
        if [ $? -ne 0 ]; then
        echo -e "\e[1A\e[K${ERROR} - $FONT install had failed, please check the install.log"
        exit 1
    fi
done

for BAR in waybar; do
    install_package  "$BAR" 2>&1 | tee -a "$LOG"
        if [ $? -ne 0 ]; then
        echo -e "\e[1A\e[K${ERROR} - $BAR install had failed, please check the install.log"
        exit 1
    fi
done


echo
print_success "All necessary packages installed successfully."
sleep 2

#clear screen
clear

#themes and cursors
read -n1 -rep "${CAT} OPTIONAL - Would you like to install Catppuccin-GTK Mocha Theme and Cursors? (y/n)" inst2
if [[ $inst2 =~ ^[Yy]$ ]]; then
  printf "${NOTE} Installing Theme packages...\n"
  for THEME in catppuccin-gtk-theme-mocha catppuccin-cursors-mocha ; do
    install_package "$THEME" 2>&1 | tee -a "$LOG"
        if [ $? -ne 0 ]; then
        echo -e "\e[1A\e[K${ERROR} - $THEME install had failed, please check the install.log"
        exit 1
    fi
    done

else
  printf "${NOTE} No themes will be installed..\n"
fi

#clear screen
clear
#install librewolf with necessary plugins
 
# BLUETOOTH
read -n1 -rep "${CAT} OPTIONAL - Would you like to install Bluetooth packages? (y/n)" inst4
if [[ $inst4 =~ ^[Yy]$ ]]; then
  printf "${NOTE} Installing Bluetooth Packages...\n"
  for BLUE in bluez bluez-utils blueman; do
    install_package "$BLUE" 2>&1 | tee -a "$LOG"
         if [ $? -ne 0 ]; then
        echo -e "\e[1A\e[K${ERROR} - $BLUE install had failed, please check the install.log"
        exit 1
        fi
    done

  printf " Activating Bluetooth Services...\n"
  sudo systemctl enable --now bluetooth.service 2>&1 | tee -a "$LOG"
else
  printf "${NOTE} No bluetooth packages installed..\n"
fi

#clear screen
clear


# XDPH
printf "${YELLOW} Install the desktop portal? This shit breaks so often, you may want to do this manually later\n"
printf "\n"
read -n1 -rep "${CAT} Would you like to install XDG-Portal-Hyprland? (y/n)" XDPH
if [[ $XDPH =~ ^[Yy]$ ]]; then
  printf "${NOTE} Installing XDPH...\n"
  for xdph in xdg-desktop-portal-hyprland xdg-desktop-portal-gtk; do
    install_package "$xdph" 2>&1 | tee -a "$LOG"
        if [ $? -ne 0 ]; then
        echo -e "\e[1A\e[K${ERROR} - $xdph install had failed, please check the install.log"
        exit 1
        fi
    done
    
    printf "${NOTE} Checking for other other XDG-Desktop-Portal-Implementations....\n"
    sleep 1
    printf "\n"
    printf "${NOTE} If you are for some reason using this on a system with KDE installed remove the KDE portal manually.\n"
    read -n1 -rep "${CAT} Would you like me to try to remove other XDG-Desktop-Portal-Implementations? (y/n)" XDPH1
    sleep 1
    if [[ $XDPH1 =~ ^[Yy]$ ]]; then
        # Clean out other portals
    printf "${NOTE} Clearing any other xdg-desktop-portal implementations...\n"
        # Check if packages are installed and uninstall if present
    if pacman -Qs xdg-desktop-portal-gnome > /dev/null ; then
        echo "Removing xdg-desktop-portal-gnome..."
        sudo pacman -R --noconfirm xdg-desktop-portal-gnome 2>&1 | tee -a "$LOG"
    fi
    if pacman -Qs xdg-desktop-portal-wlr > /dev/null ; then
        echo "Removing xdg-desktop-portal-wlr..."
        sudo pacman -R --noconfirm xdg-desktop-portal-wlr 2>&1 | tee -a "$LOG"
    fi
    if pacman -Qs xdg-desktop-portal-lxqt > /dev/null ; then
        echo "Removing xdg-desktop-portal-lxqt..."
        sudo pacman -R --noconfirm xdg-desktop-portal-lxqt 2>&1 | tee -a "$LOG"
    fi    
    print_success " All other XDG-DESKTOP-PORTAL implementations cleared."
    fi
else
  printf "${NOTE} XDPH will not be installed..\n"
fi

#clear screen
clear

### Disable wifi powersave mode ###
read -n1 -rp "${CAT} Would you like to disable wifi powersave? (y/n) " WIFI
if [[ $WIFI =~ ^[Yy]$ ]]; then
    LOC="/etc/NetworkManager/conf.d/wifi-powersave.conf"
    if [ -f "$LOC" ]; then
        printf "${OK} seems wifi powersave already disabled.\n"
    else
        printf "\n"
        printf "${NOTE} The following has been added to $LOC.\n"
        printf "[connection]\nwifi.powersave = 2" | sudo tee -a $LOC
        printf "\n"
        printf "${NOTE} Restarting NetworkManager service...\n"
        sudo systemctl restart NetworkManager 2>&1 | tee -a "$LOG"
        sleep 2        
    fi    
else
    printf "${NOTE} WIFI Powersave is not being disabled.\n"
fi

#clear screen
clear


# Function to detect keyboard layout in a tty environment
detect_tty_layout() {
  layout=$(localectl status --no-pager | awk '/X11 Layout/ {print $3}')
  if [ -n "$layout" ]; then
    echo "$layout"
  else
    echo "unknown"
  fi
}

# preparing hyprland.conf keyboard layout
# Function to detect keyboard layout in an X server environment
detect_x_layout() {
  layout=$(setxkbmap -query | grep layout | awk '{print $2}')
  if [ -n "$layout" ]; then
    echo "$layout"
  else
    echo "unknown"
  fi
}

# Detect the current keyboard layout based on the environment
if [ -n "$DISPLAY" ]; then
  # System is in an X server environment
  layout=$(detect_x_layout)
else
  # System is in a tty environment
  layout=$(detect_tty_layout)
fi

echo "Keyboard layout: $layout"

printf "${NOTE} Detecting keyboard layout to prepare necessary changes in hyprland.conf before copying\n"
printf "\n"
printf "\n"

# Prompt the user to confirm whether the detected layout is correct
read -p "Detected keyboard layout or keymap: $layout. Is this correct? [y/n] " confirm

if [ "$confirm" = "y" ]; then
  # If the detected layout is correct, update the 'kb_layout=' line in the file
  awk -v layout="$layout" '/kb_layout/ {$0 = "  kb_layout=" layout} 1' config/hypr/hyprland.conf > temp.conf
  mv temp.conf config/hypr/hyprland.conf
else
  # If the detected layout is not correct, prompt the user to enter the correct layout
  printf "${WARN} Ensure to type in the proper keyboard layout, e.g., uk, de, pl, etc.\n"
  read -p "Please enter the correct keyboard layout: " new_layout
  # Update the 'kb_layout=' line with the correct layout in the file
  awk -v new_layout="$new_layout" '/kb_layout/ {$0 = "  kb_layout=" new_layout} 1' config/hypr/hyprland.conf > temp.conf
  mv temp.conf config/hypr/hyprland.conf
fi
printf "\n"
printf "\n"

### Copy Config Files ###
set -e # Exit immediately if a command exits with a non-zero status.

read -n1 -rep "${CAT} Would you like to copy config and wallpaper files? (y,n)" CFG
if [[ $CFG =~ ^[Yy]$ ]]; then

# check for existing config folders and backup 
    for DIR in animdl dconf nvim nwg-look ncmpcpp neofetch jellyfin-rpc wireplumber tmux rofi shell zsh mpv mpd btop cava hypr foot mako swaylock waybar wlogout wofi 
    do 
        DIRPATH=~/.config/$DIR
        if [ -d "$DIRPATH" ]; then 
            echo -e "${NOTE} - Config for $DIR found, attempting to back up."
            mv $DIRPATH $DIRPATH-back-up 2>&1 | tee -a "$LOG"
            echo -e "${NOTE} - Backed up $DIR to $DIRPATH-back-up."
        fi

    done

    for DIRw in wallpapers
    do 
        DIRPATH=~/Pictures/$DIRw
        if [ -d "$DIRPATH" ]; then 
            echo -e "${NOTE} - wallpapers in $DIRw found, attempting to back up."
            mv $DIRPATH $DIRPATH-back-up 2>&1 | tee -a "$LOG"
            echo -e "${NOTE} - Backed up $DIRw to $DIRPATH-back-up."
        fi

    done

    printf " Copying config files...\n"
    mkdir -p ~/.config
    cp -r config/hypr ~/.config/ || { echo "Error: Failed to copy hypr config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/foot ~/.config/ || { echo "Error: Failed to copy foot config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/wlogout ~/.config/ || { echo "Error: Failed to copy wlogout config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/btop ~/.config/ || { echo "Error: Failed to copy btop config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/cava ~/.config/ || { echo "Error: Failed to copy cava config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/animdl ~/.config/ || { echo "Error: Failed to copy animdl config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/dconf ~/.config/ || { echo "Error: Failed to copy dconf config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/nvim ~/.config/ || { echo "Error: Failed to copy nvim config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/nwg-look ~/.config/ || { echo "Error: Failed to nwg-look cava config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/ncmpcpp ~/.config/ || { echo "Error: Failed to copy ncmpcpp config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/neofetch ~/.config/ || { echo "Error: Failed to copy neofetch config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/wireplumber ~/.config/ || { echo "Error: Failed to copy wireplumber config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/tmux ~/.config/ || { echo "Error: Failed to copy tmux config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/rofi ~/.config/ || { echo "Error: Failed to copy rofi config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/shell ~/.config/ || { echo "Error: Failed to copy shell config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/zsh ~/.config/ || { echo "Error: Failed to copy zsh config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/mpv ~/.config/ || { echo "Error: Failed to copy mpv config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/mpd ~/.config/ || { echo "Error: Failed to copy mpd config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/pulse ~/.config/ || { echo "Error: Failed to copy pulse config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/swaylock ~/.config/ || { echo "Error: Failed to copy swaylock config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/zsh/.zshrc ~/ || { echo "Error: Failed to copy .zshrc config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/starship.toml ~/.config/ || { echo "Error: Failed to copy starship config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/.bashrc ~/ || { echo "Error: Failed to copy bash config files."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/.zprofile ~/ || { echo "Error: Failed to copy zprofile!."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/.gtkrc-2.0 ~/ || { echo "Error: Failed to copy gtk2.0 rc!."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r config/gtk-3.0 ~/.config/ || { echo "Error: Failed to copy gtk config files."; exit 1; } 2>&1 | tee -a "$LOG"
    mkdir -p ~/.local/
    mkdir -p ~/.local/bin
    cp -r local/hyprland.sh ~/.local/bin/ || { echo "Error: Failed to copy hyprland startup script. Have fun trying to fix that."; exit 1; } 2>&1 | tee -a "$LOG"
    cp -r local/menu ~/.local/bin/ || { echo "Error: Failed to copy menu script. Have fun trying to fix that."; exit 1; } 2>&1 | tee -a "$LOG"
    mkdir -p ~/Pictures/wallpapers
    cp -r wallpapers ~/Pictures/ && { echo "Copy completed!"; } || { echo "Error: Failed to copy wallpapers."; exit 1; } 2>&1 | tee -a "$LOG"

    # Set some files as executable 
    chmod +x ~/.config/hypr/scripts/* 2>&1 | tee -a "$LOG"
    chmod +x ~/.local/bin/* 2>&1 | tee -a "$LOG"
else
   print_error " No Config files and wallpaper files copied"
fi

#enable zsh as default shell
chsh -s /bin/zsh
#clear screen
clear

### Script is done ###
printf "\n${OK} Installation complete, pain and suffering follow.\n"
printf "\n"
printf "\n"
printf "\n${NOTE} Remember to restart if on novideo" 
printf "\n"
printf "\n"
sleep 2
printf "\n${NOTE} Hyprland should start automatically on next login. If it doesn't well.. have fun!\n"
printf "\n"
printf "\n"
printf "\n"
exit
